name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "macOS Universal"
            runner: macos-15
            platform: "macOS"
            xcode: "16.4"
            arch: "universal"
            comprehensive_test: true
            lint_check: true
          - name: "Linux x86_64"
            runner: ubuntu-latest
            platform: "Linux"
            arch: "x86_64"
            triple: "x86_64-unknown-linux-gnu"
          - name: "Linux ARM64"
            runner: ubuntu-24.04-arm
            platform: "Linux"
            arch: "aarch64"
            triple: "aarch64-unknown-linux-gnu"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version (macOS only)
        if: matrix.platform == 'macOS'
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer

      - name: Setup Swift (Linux only)
        if: matrix.platform == 'Linux'
        run: |
          # Check if Swift is already available
          if command -v swift >/dev/null 2>&1; then
            echo "Swift is already available:"
            swift --version
          else
            echo "Installing Swift using Swiftly..."

            # Install Swiftly
            curl -L https://swift-server.github.io/swiftly/swiftly-install.sh | bash

            # Add Swiftly to PATH for current session
            export PATH="$HOME/.local/bin:$PATH"
            echo "$HOME/.local/bin" >> $GITHUB_PATH

            # Install latest Swift toolchain
            swiftly install latest
            swiftly use latest

            echo "Swift installation completed:"
            swift --version
          fi

      - name: Show Swift version
        run: swift --version

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.cache/org.swift.swiftpm
          key: ${{ runner.os }}-${{ matrix.arch }}-spm-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-spm-
            ${{ runner.os }}-spm-

      - name: Resolve dependencies
        run: swift package resolve

      - name: Run tests
        run: swift test --enable-code-coverage

      - name: Build optimized binary
        run: |
          # Show version that will be detected
          VERSION=$(git describe --tags --always 2>/dev/null | sed 's/^v//' || echo "dev")
          echo "Version will be detected as: $VERSION"

          if [ "${{ matrix.platform }}" = "macOS" ]; then
            echo "Building universal macOS binary..."
            swift build --configuration release --arch arm64 --arch x86_64 -Xswiftc -Osize
            strip -rSTx .build/apple/Products/Release/swift-dependency-audit
          else
            echo "Building static Linux binary for ${{ matrix.arch }}..."
            swift build --configuration release --triple ${{ matrix.triple }} -Xswiftc -Osize --static-swift-stdlib
            strip .build/${{ matrix.triple }}/release/swift-dependency-audit
          fi

      - name: Basic functionality test
        run: |
          if [ "${{ matrix.platform }}" = "macOS" ]; then
            BINARY_PATH=".build/apple/Products/Release/swift-dependency-audit"
          else
            BINARY_PATH=".build/${{ matrix.triple }}/release/swift-dependency-audit"
          fi

          echo "Testing basic functionality..."
          $BINARY_PATH --version
          $BINARY_PATH --help > /dev/null
          $BINARY_PATH . --exclude-tests --quiet

      - name: Comprehensive validation (macOS only)
        if: matrix.comprehensive_test
        run: |
          BINARY_PATH=".build/apple/Products/Release/swift-dependency-audit"

          echo "=== Comprehensive CLI Validation ==="
          $BINARY_PATH --help
          $BINARY_PATH --version

          echo "=== Testing Self-Analysis ==="
          $BINARY_PATH . --verbose --exclude-tests

          echo "=== Testing JSON Output ==="
          $BINARY_PATH . --json --no-color --exclude-tests > output.json
          cat output.json | python3 -m json.tool > /dev/null || (echo "❌ Invalid JSON output" && exit 1)
          echo "✅ JSON output is valid"

          echo "=== Testing Output Formats ==="
          $BINARY_PATH . --output-format xcode --quiet --exclude-tests
          $BINARY_PATH . --output-format github-actions --quiet --exclude-tests

          echo "=== Testing Custom Whitelist ==="
          $BINARY_PATH . --whitelist "Foundation,SwiftUI,ArgumentParser" --verbose --exclude-tests

          echo "=== Testing Plugin Integration ==="
          if swift package plugin --list | grep -q "DependencyAuditPlugin"; then
            echo "✅ Plugin is properly registered"
          else
            echo "⚠️ Plugin not found in list, but core functionality works"
          fi

      - name: Lint and format check (macOS only)
        if: matrix.lint_check
        run: |
          echo "=== Format Check ==="
          if command -v swift-format &> /dev/null; then
            swift-format --version
            find Sources Tests -name "*.swift" | xargs swift-format --mode diff
          else
            echo "swift-format not available, skipping format check"
          fi

          echo "=== Build Warnings Check ==="
          swift build --configuration release 2>&1 | tee build.log
          if grep -q "warning:" build.log; then
            echo "⚠️  Build warnings found:"
            grep "warning:" build.log
            exit 1
          else
            echo "✅ No build warnings found"
          fi
        continue-on-error: true

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.platform }}-${{ matrix.arch }}
          path: |
            .build/apple/Products/Release/swift-dependency-audit
            .build/*/release/swift-dependency-audit
          retention-days: 7
