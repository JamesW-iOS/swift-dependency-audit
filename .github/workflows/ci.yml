name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    name: Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: macos-15
            xcode: "16.4"
            platform: "macOS"
          - os: ubuntu-latest
            platform: "Linux"
            swift_version: "6.1"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version (macOS only)
        if: matrix.platform == 'macOS'
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer

      - name: Setup Swift (Linux only)
        if: matrix.platform == 'Linux'
        uses: vapor/swiftly-action@v0.2
        with:
          toolchain: ${{ matrix.swift_version }}

      - name: Show Swift version
        run: swift --version

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.cache/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-

      - name: Resolve dependencies
        run: swift package resolve

      - name: Build debug
        run: swift build --configuration debug

      - name: Build release
        run: swift build --configuration release

      - name: Run tests
        run: swift test --configuration debug --enable-code-coverage

      - name: Test CLI functionality
        run: |
          swift run swift-dependency-audit --help
          swift run swift-dependency-audit . --verbose --exclude-tests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.platform }}
          path: |
            .build/release/swift-dependency-audit
          retention-days: 7

  test-docker-builds:
    name: Test Docker Builds
    uses: ./.github/workflows/docker.yml
    with:
      upload_artifacts: true
      artifact_retention_days: 7

  lint:
    name: Lint and Format Check
    runs-on: macos-15
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.cache/org.swift.swiftpm
          key: ${{ runner.os }}-spm-lint-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-lint-
            ${{ runner.os }}-spm-

      - name: Check Swift format
        run: |
          # Install swift-format if available
          if command -v swift-format &> /dev/null; then
            swift-format --version
            find Sources Tests -name "*.swift" | xargs swift-format --mode diff
          else
            echo "swift-format not available, skipping format check"
          fi
        continue-on-error: true

      - name: Swift build warnings check
        run: |
          swift build --configuration release 2>&1 | tee build.log
          if grep -q "warning:" build.log; then
            echo "⚠️  Build warnings found:"
            grep "warning:" build.log
            exit 1
          fi

  validate-functionality:
    name: Validate Build Functionality
    runs-on: macos-15
    needs: [test, test-docker-builds]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode_16.4.app/Contents/Developer

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.cache/org.swift.swiftpm
          key: ${{ runner.os }}-spm-validation-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-validation-
            ${{ runner.os }}-spm-

      - name: Build release binary
        run: swift build --configuration release

      - name: Comprehensive CLI validation
        run: |
          echo "=== Testing CLI Help and Version ==="
          .build/release/swift-dependency-audit --help
          .build/release/swift-dependency-audit --version

          echo "=== Testing Self-Analysis ==="
          .build/release/swift-dependency-audit . --verbose --exclude-tests

          echo "=== Testing JSON Output ==="
          .build/release/swift-dependency-audit . --json --no-color > output.json
          cat output.json | python3 -m json.tool > /dev/null || (echo "❌ Invalid JSON output" && exit 1)
          echo "✅ JSON output is valid"

          echo "=== Testing Xcode Output Format ==="
          .build/release/swift-dependency-audit . --output-format xcode --quiet

          echo "=== Testing GitHub Actions Output Format ==="
          .build/release/swift-dependency-audit . --output-format github-actions --quiet

          echo "=== Testing Custom Whitelist ==="
          .build/release/swift-dependency-audit . --whitelist "Foundation,SwiftUI,ArgumentParser" --verbose

      - name: Plugin functionality validation
        run: |
          echo "=== Testing Plugin Integration ==="
          # Test that the plugin can be loaded
          swift package plugin --list | grep -q "DependencyAuditPlugin" || (echo "❌ Plugin not found" && exit 1)
          echo "✅ Plugin is properly registered"
