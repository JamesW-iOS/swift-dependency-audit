name: Release

on:
  push:
    tags: ["*"]
  workflow_dispatch:
    inputs:
      tag_name:
        description: "Tag name for the release"
        required: true
        default: "v1.0.0"

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "macOS Universal"
            runner: macos-15
            platform: "macOS"
            xcode: "16.4"
            arch: "universal"
          - name: "Linux x86_64"
            runner: ubuntu-latest
            platform: "Linux"
            arch: "x86_64"
            triple: "x86_64-unknown-linux-gnu"
          - name: "Linux ARM64"
            runner: ubuntu-24.04-arm
            platform: "Linux"
            arch: "aarch64"
            triple: "aarch64-unknown-linux-gnu"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version (macOS only)
        if: matrix.platform == 'macOS'
        run: sudo xcode-select -s /Applications/Xcode_${{ matrix.xcode }}.app/Contents/Developer

      - name: Setup Swift (Linux only)
        if: matrix.platform == 'Linux'
        run: |
          # Check if Swift is already available
          if command -v swift >/dev/null 2>&1; then
            echo "Swift is already available:"
            swift --version
          else
            echo "Installing Swift using Swiftly..."

            # Install Swiftly
            curl -L https://swift-server.github.io/swiftly/swiftly-install.sh | bash

            # Add Swiftly to PATH for current session
            export PATH="$HOME/.local/bin:$PATH"
            echo "$HOME/.local/bin" >> $GITHUB_PATH

            # Install latest Swift toolchain
            swiftly install latest
            swiftly use latest

            echo "Swift installation completed:"
            swift --version
          fi

      - name: Show Swift version
        run: swift --version

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.cache/org.swift.swiftpm
          key: ${{ runner.os }}-${{ matrix.arch }}-spm-release-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.arch }}-spm-
            ${{ runner.os }}-spm-

      - name: Resolve dependencies
        run: swift package resolve

      - name: Build optimized binary
        run: |
          # Show version that will be detected
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag_name }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          VERSION=${VERSION#v}  # Remove 'v' prefix if present

          if [ "${{ matrix.platform }}" = "macOS" ]; then
            echo "Building universal macOS binary (version will be detected as: $VERSION)..."

            # Build ARM64 binary
            echo "Building ARM64 binary..."
            swift build --configuration release --arch arm64 -Xswiftc -Osize

            # Build x86_64 binary
            echo "Building x86_64 binary..."
            swift build --configuration release --arch x86_64 -Xswiftc -Osize

            # Create output directory
            mkdir -p .build/apple/Products/Release

            # Combine architectures with lipo
            echo "Combining architectures with lipo..."
            lipo -create \
              .build/arm64-apple-macosx/release/swift-dependency-audit \
              .build/x86_64-apple-macosx/release/swift-dependency-audit \
              -output .build/apple/Products/Release/swift-dependency-audit

            # Verify the universal binary
            echo "Verifying universal binary..."
            lipo -info .build/apple/Products/Release/swift-dependency-audit

            # Strip the final binary
            strip -rSTx .build/apple/Products/Release/swift-dependency-audit
          else
            echo "Building static Linux binary for ${{ matrix.arch }} (version will be detected as: $VERSION)..."
            swift build --configuration release --triple ${{ matrix.triple }} -Xswiftc -Osize --static-swift-stdlib
            strip .build/${{ matrix.triple }}/release/swift-dependency-audit
          fi

      - name: Install App Store Connect API Key
        if: matrix.platform == 'macOS'
        run: |
          mkdir -p private_keys/
          echo "${{ secrets.APPLE_API_KEY_BASE64 }}" | base64 -d > private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8
          echo "${{ secrets.APPLE_CERTIFICATE_P12_BASE64 }}" | base64 -d > /tmp/certificate.p12

      - name: Sign and notarize macOS binary
        if: matrix.platform == 'macOS'
        uses: indygreg/apple-code-sign-action@v1
        with:
          input_path: .build/apple/Products/Release/swift-dependency-audit
          p12_file: /tmp/certificate.p12
          p12_password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          notarize: true
          staple: true
          app_store_connect_api_issuer: ${{ secrets.APPLE_API_ISSUER_ID }}
          app_store_connect_api_key: ${{ secrets.APPLE_API_KEY_ID }}

      - name: Clean up certificate files
        if: matrix.platform == 'macOS'
        run: |
          rm -f /tmp/certificate.p12 private_keys/AuthKey_${{ secrets.APPLE_API_KEY_ID }}.p8

      - name: Basic functionality test
        run: |
          if [ "${{ matrix.platform }}" = "macOS" ]; then
            BINARY_PATH=".build/apple/Products/Release/swift-dependency-audit"
          else
            BINARY_PATH=".build/${{ matrix.triple }}/release/swift-dependency-audit"
          fi

          echo "Testing basic functionality..."
          $BINARY_PATH --version
          $BINARY_PATH --help > /dev/null
          $BINARY_PATH . --exclude-tests --quiet

      - name: Comprehensive validation
        run: |
          if [ "${{ matrix.platform }}" = "macOS" ]; then
            BINARY_PATH=".build/apple/Products/Release/swift-dependency-audit"
          else
            BINARY_PATH=".build/${{ matrix.triple }}/release/swift-dependency-audit"
          fi

          echo "=== Comprehensive CLI Validation ==="
          $BINARY_PATH --help
          $BINARY_PATH --version

          echo "=== Testing Self-Analysis ==="
          $BINARY_PATH . --verbose --exclude-tests

          echo "=== Testing JSON Output ==="
          $BINARY_PATH . --output-format json --no-color --exclude-tests > output.json
          jq . output.json > /dev/null || (echo "❌ Invalid JSON output" && exit 1)
          echo "✅ JSON output is valid"

          echo "=== Testing Output Formats ==="
          $BINARY_PATH . --output-format xcode --quiet --exclude-tests
          $BINARY_PATH . --output-format github-actions --quiet --exclude-tests

          echo "=== Testing Custom Whitelist ==="
          $BINARY_PATH . --whitelist "Foundation,SwiftUI,ArgumentParser" --verbose --exclude-tests

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform == 'macOS' && 'swift-dependency-audit-macos' || format('linux-{0}-binary', matrix.arch) }}
          path: ${{ matrix.platform == 'macOS' && '.build/apple/Products/Release/swift-dependency-audit' || format('.build/{0}/release/swift-dependency-audit', matrix.triple) }}
          retention-days: 30

  create-release:
    name: "Create Release"
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Setup artifact structure
        run: |
          # Create the build directory structure expected by our script
          mkdir -p .build/apple/Products/Release
          mkdir -p .build/x86_64-unknown-linux-gnu/release
          mkdir -p .build/aarch64-unknown-linux-gnu/release

          # Copy binaries to expected locations
          cp swift-dependency-audit-macos/swift-dependency-audit .build/apple/Products/Release/
          cp linux-x86_64-binary/swift-dependency-audit .build/x86_64-unknown-linux-gnu/release/
          cp linux-aarch64-binary/swift-dependency-audit .build/aarch64-unknown-linux-gnu/release/

          # Make binaries executable
          chmod +x .build/apple/Products/Release/swift-dependency-audit
          chmod +x .build/x86_64-unknown-linux-gnu/release/swift-dependency-audit
          chmod +x .build/aarch64-unknown-linux-gnu/release/swift-dependency-audit

      - name: Install 7zip
        run: sudo apt-get update && sudo apt-get install -y p7zip-full

      - name: Create artifact bundle using scripts
        run: |
          # Get version from git tag or manual input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag_name }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          echo "Creating artifact bundle for version $VERSION using scripts"

          # Create artifact bundle using existing binaries (skip rebuild)
          chmod +x Scripts/spm-artifact-bundle.sh

          # Run script with error handling for missing Linux binaries
          if ! ./Scripts/spm-artifact-bundle.sh "${VERSION#v}"; then
            echo "❌ Artifact bundle creation failed"
            echo "=== Debug: Checking directory structure ==="
            find .build -type f -name "swift-dependency-audit" -exec ls -la {} \; || echo "No binaries found"
            exit 1
          fi

          # Activate production Package.swift for releases
          cp Templates/Package-production.swift Package.swift

          # Update Package.swift with actual checksum and version
          chmod +x Scripts/update-artifact-bundle.sh
          ./Scripts/update-artifact-bundle.sh "$VERSION"

      - name: Commit updated Package.swift to release branch
        run: |
          # Configure git for GitHub Actions bot
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          # Get version
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag_name }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi

          # Create and switch to release branch
          RELEASE_BRANCH="release/${VERSION}"
          git checkout -b "$RELEASE_BRANCH"

          # Get the checksum for the commit message
          CHECKSUM=$(cat swift-dependency-audit.artifactbundle.zip.checksum)

          # Add and commit the updated Package.swift
          git add Package.swift
          git commit -m "Release Package.swift for $VERSION

          - Production Package.swift with binary targets
          - Updated binary target URL for $VERSION
          - Updated checksum: $CHECKSUM

          🤖 Automated release commit"

          # Push the release branch
          git push origin "$RELEASE_BRANCH"

          # Update the release tag to point to this commit
          git tag -f "$VERSION"
          git push origin --tags --force

      - name: Create traditional release archives
        run: |
          # Get version
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag_name }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi
          VERSION=${VERSION#v}  # Remove 'v' prefix if present

          # Create directories for archives
          mkdir -p release

          # Universal macOS binary
          mkdir -p "swift-dependency-audit-$VERSION-macos-universal"
          cp .build/apple/Products/Release/swift-dependency-audit "swift-dependency-audit-$VERSION-macos-universal/"
          cp LICENSE "swift-dependency-audit-$VERSION-macos-universal/" || echo "No LICENSE file found"
          cp README.md "swift-dependency-audit-$VERSION-macos-universal/" || echo "No README.md file found"
          tar -czf "release/swift-dependency-audit-$VERSION-macos-universal.tar.gz" "swift-dependency-audit-$VERSION-macos-universal"

          # Linux x86_64 binary
          mkdir -p "swift-dependency-audit-$VERSION-linux-x86_64"
          cp .build/x86_64-unknown-linux-gnu/release/swift-dependency-audit "swift-dependency-audit-$VERSION-linux-x86_64/"
          cp LICENSE "swift-dependency-audit-$VERSION-linux-x86_64/" || echo "No LICENSE file found"
          cp README.md "swift-dependency-audit-$VERSION-linux-x86_64/" || echo "No README.md file found"
          tar -czf "release/swift-dependency-audit-$VERSION-linux-x86_64.tar.gz" "swift-dependency-audit-$VERSION-linux-x86_64"

          # Linux ARM64 binary
          mkdir -p "swift-dependency-audit-$VERSION-linux-aarch64"
          cp .build/aarch64-unknown-linux-gnu/release/swift-dependency-audit "swift-dependency-audit-$VERSION-linux-aarch64/"
          cp LICENSE "swift-dependency-audit-$VERSION-linux-aarch64/" || echo "No LICENSE file found"
          cp README.md "swift-dependency-audit-$VERSION-linux-aarch64/" || echo "No README.md file found"
          tar -czf "release/swift-dependency-audit-$VERSION-linux-aarch64.tar.gz" "swift-dependency-audit-$VERSION-linux-aarch64"

      - name: Generate checksums
        run: |
          cd release
          # Use portable checksum command
          if command -v shasum >/dev/null 2>&1; then
            shasum -a 256 *.tar.gz > checksums.txt
          elif command -v sha256sum >/dev/null 2>&1; then
            sha256sum *.tar.gz > checksums.txt
          else
            echo "❌ No checksum tool available"
            exit 1
          fi
          cat checksums.txt

      - name: Generate release notes
        run: |
          # Get version from git tag or manual input
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.tag_name }}"
          else
            VERSION=${GITHUB_REF#refs/tags/}
          fi

          # Make script executable and generate release notes
          chmod +x Scripts/generate-release-notes.sh

          # Try to extract specific version, fallback to unreleased
          if ./Scripts/generate-release-notes.sh "$VERSION" > release_notes.md 2>/dev/null; then
            echo "✅ Generated release notes from CHANGELOG.md for $VERSION"
          elif ./Scripts/generate-release-notes.sh "unreleased" > release_notes.md 2>/dev/null; then
            echo "⚠️  Specific version not found, using unreleased section"
          else
            echo "⚠️  Could not extract from CHANGELOG.md, using fallback"
            cat > release_notes.md << 'EOF'
          ## Release Notes

          This release includes improvements and bug fixes. See the full changelog for details.
          EOF
          fi

          # Get the checksum for the release notes
          CHECKSUM=$(cat swift-dependency-audit.artifactbundle.zip.checksum)

          # Add installation instructions to release notes using template
          echo "" >> release_notes.md  # Add blank line before footer
          sed -e "s/__REPOSITORY__/${{ github.repository }}/g" \
              -e "s/__VERSION__/${VERSION}/g" \
              -e "s/__CHECKSUM__/${CHECKSUM}/g" \
              Templates/release-notes-footer.md >> release_notes.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: github.event_name == 'push'
        with:
          files: |
            swift-dependency-audit.artifactbundle.zip
            swift-dependency-audit.artifactbundle.zip.checksum
            Package.swift
            release/*.tar.gz
            release/checksums.txt
          body_path: release_notes.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts for manual dispatch
        uses: actions/upload-artifact@v4
        if: github.event_name == 'workflow_dispatch'
        with:
          name: release-binaries
          path: |
            swift-dependency-audit.artifactbundle.zip
            swift-dependency-audit.artifactbundle.zip.checksum
            release/*.tar.gz
            release/checksums.txt
          retention-days: 30
