name: Docker Build

on:
  workflow_call:
    inputs:
      ref:
        description: "Git ref to checkout"
        required: false
        default: ${{ github.ref }}
        type: string
      upload_artifacts:
        description: "Whether to upload artifacts"
        required: false
        default: false
        type: boolean
      artifact_retention_days:
        description: "How long to retain artifacts"
        required: false
        default: 7
        type: number
    outputs:
      artifact_name_x86_64:
        description: "Name of the x86_64 Linux artifact"
        value: ${{ jobs.build-linux.outputs.artifact_name_x86_64 }}
      artifact_name_aarch64:
        description: "Name of the aarch64 Linux artifact"
        value: ${{ jobs.build-linux.outputs.artifact_name_aarch64 }}

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [x86_64, aarch64]
    outputs:
      artifact_name_x86_64: linux-x86_64-binary
      artifact_name_aarch64: linux-aarch64-binary
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}

      - name: Cache Swift Package Manager
        uses: actions/cache@v4
        with:
          path: |
            .build
            ~/.cache/org.swift.swiftpm
          key: ${{ runner.os }}-spm-${{ matrix.arch }}-${{ hashFiles('Package.swift', 'Package.resolved') }}
          restore-keys: |
            ${{ runner.os }}-spm-${{ matrix.arch }}-
            ${{ runner.os }}-spm-

      - name: Build Linux binary for ${{ matrix.arch }}
        run: |
          # Create build directory
          mkdir -p .build/${{ matrix.arch }}-unknown-linux-gnu/release
          
          if [ "${{ matrix.arch }}" = "x86_64" ]; then
            # Native x86_64 build
            echo "Building natively for x86_64..."
            docker run --rm \
              --platform linux/amd64 \
              -v $PWD:/workspace \
              -w /workspace \
              -e HOME=/tmp \
              swift:6.1 \
              bash -c "
                echo 'Building Swift Dependency Audit for x86_64...' && \
                swift --version && \
                echo 'Resolving dependencies...' && \
                swift package resolve && \
                echo 'Building release binary...' && \
                swift build -c release --triple x86_64-unknown-linux-gnu -Xswiftc -Osize --static-swift-stdlib && \
                echo 'Stripping binary for size optimization...' && \
                strip .build/x86_64-unknown-linux-gnu/release/swift-dependency-audit && \
                echo 'Build completed successfully for x86_64'
              "
          else
            # Cross-compilation for ARM64 using static Swift stdlib with proper resource directory
            echo "Cross-compiling for aarch64 with static linking..."
            docker run --rm \
              --platform linux/amd64 \
              -v $PWD:/workspace \
              -w /workspace \
              -e HOME=/tmp \
              swift:6.1 \
              bash -c "
                echo 'Cross-compiling Swift Dependency Audit for aarch64...' && \
                swift --version && \
                echo 'Installing cross-compilation tools...' && \
                apt-get update && apt-get install -y gcc-aarch64-linux-gnu && \
                echo 'Resolving dependencies...' && \
                swift package resolve && \
                echo 'Building release binary with static cross-compilation...' && \
                swift build -c release --triple aarch64-unknown-linux-gnu -Xswiftc -Osize -Xcc -target -Xcc aarch64-unknown-linux-gnu --static-swift-stdlib -Xswiftc -resource-dir -Xswiftc /usr/lib/swift_static && \
                echo 'Stripping binary with cross-compilation tools...' && \
                aarch64-linux-gnu-strip .build/aarch64-unknown-linux-gnu/release/swift-dependency-audit && \
                echo 'Build completed successfully for aarch64'
              "
          fi

      - name: Verify binary was created and get info
        run: |
          echo "Binary information for ${{ matrix.arch }}:"
          ls -la .build/${{ matrix.arch }}-unknown-linux-gnu/release/swift-dependency-audit
          file .build/${{ matrix.arch }}-unknown-linux-gnu/release/swift-dependency-audit
          du -h .build/${{ matrix.arch }}-unknown-linux-gnu/release/swift-dependency-audit

      - name: Test binary functionality (x86_64 only)
        if: matrix.arch == 'x86_64'  
        run: |
          # Test static binary (should work without Swift runtime libraries)
          echo "Testing static binary functionality..."
          .build/x86_64-unknown-linux-gnu/release/swift-dependency-audit --version
          .build/x86_64-unknown-linux-gnu/release/swift-dependency-audit --help
          echo "✅ Static binary functionality tests passed"
          
      - name: Test binary functionality (aarch64 only)
        if: matrix.arch == 'aarch64'
        run: |
          # Test that ARM64 static binary was built correctly (can't execute on x86_64 runner)
          echo "Verifying ARM64 static binary properties..."
          file .build/aarch64-unknown-linux-gnu/release/swift-dependency-audit
          ldd .build/aarch64-unknown-linux-gnu/release/swift-dependency-audit || echo "✅ Static binary - no dynamic dependencies"


      - name: Upload Linux binary artifacts
        if: inputs.upload_artifacts
        uses: actions/upload-artifact@v4
        with:
          name: linux-${{ matrix.arch }}-binary
          path: .build/${{ matrix.arch }}-unknown-linux-gnu/release/swift-dependency-audit
          retention-days: ${{ inputs.artifact_retention_days }}