import ArgumentParser
import Foundation

@main
struct VersionGenerator: AsyncParsableCommand {
    static let configuration = CommandConfiguration(
        commandName: "version-generator",
        abstract: "Generate a Swift file declaring the current build-time version information",
        discussion: """
            This tool generates a Swift file containing version information for the current package.
            It reads the version from the VERSION environment variable, or falls back to git describe.
            """
    )

    @Argument(help: "Output path for the generated Version.swift file")
    var outputPath: String = "Version.swift"

    @Flag(name: .long, help: "Enable verbose output")
    var verbose: Bool = false

    func run() async throws {
        let version = getVersion()
        let versionContent = """
            // This file is automatically generated by VersionPlugin
            // Do not edit manually

            /// The current package version.
            public let VERSION = "\(version)"
            """

        do {
            try versionContent.write(to: URL(fileURLWithPath: outputPath), atomically: true, encoding: .utf8)

            let fileName = URL(fileURLWithPath: outputPath).lastPathComponent

            if verbose {
                print("‚úÖ Successfully generated \(fileName)")
                print("üìÅ Output path: \(outputPath)")
                print("üè∑Ô∏è  Version: \(version)")
            } else {
                print("Generated \(fileName) with version: \(version)")
            }
        } catch {
            let fileName = URL(fileURLWithPath: outputPath).lastPathComponent
            if verbose {
                print("‚ùå Failed to write \(fileName): \(error.localizedDescription)")
            }
            throw error
        }
    }

    private func getVersion() -> String {
        // First check for VERSION environment variable
        if let envVersion = ProcessInfo.processInfo.environment["VERSION"] {
            if verbose {
                print("üì¶ Using VERSION environment variable: \(envVersion)")
            }
            return envVersion
        }

        // Fallback to git describe
        if verbose {
            print("üîç VERSION environment variable not found, trying git...")
        }

        let process = Process()
        process.executableURL = URL(fileURLWithPath: "/usr/bin/env")
        process.arguments = ["git", "describe", "--tags", "--always"]

        let pipe = Pipe()
        process.standardOutput = pipe
        process.standardError = Pipe()

        do {
            try process.run()
            process.waitUntilExit()

            guard process.terminationStatus == 0 else {
                if verbose {
                    print("‚ö†Ô∏è  Git command failed, using 'unknown' version")
                }
                return "unknown"
            }

            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines)

            // Remove 'v' prefix if present
            let version = output?.hasPrefix("v") == true ? String(output!.dropFirst()) : output ?? "unknown"

            if verbose {
                print("üîó Using git version: \(version)")
            }

            return version
        } catch {
            if verbose {
                print("‚ùå Git command error: \(error.localizedDescription)")
                print("‚ö†Ô∏è  Using 'unknown' version")
            }
            return "unknown"
        }
    }
}
