import Foundation

@main
struct VersionGenerator {
    static func main() async throws {
        let outputPath = CommandLine.arguments.count > 1 ? CommandLine.arguments[1] : "Version.swift"
        
        let version = getVersion()
        let versionContent = """
            // This file is automatically generated by VersionPlugin
            // Do not edit manually
            
            /// The current version of SwiftDependencyAudit
            public let VERSION = "\(version)"
            """
        
        try versionContent.write(to: URL(fileURLWithPath: outputPath), atomically: true, encoding: .utf8)
        print("Generated Version.swift with version: \(version)")
    }
    
    static func getVersion() -> String {
        // First check for VERSION environment variable
        if let envVersion = ProcessInfo.processInfo.environment["VERSION"] {
            return envVersion
        }
        
        // Fallback to git describe
        let process = Process()
        process.executableURL = URL(fileURLWithPath: "/usr/bin/git")
        process.arguments = ["describe", "--tags", "--always"]
        
        let pipe = Pipe()
        process.standardOutput = pipe
        process.standardError = Pipe()
        
        do {
            try process.run()
            process.waitUntilExit()
            
            guard process.terminationStatus == 0 else {
                return "unknown"
            }
            
            let data = pipe.fileHandleForReading.readDataToEndOfFile()
            let output = String(data: data, encoding: .utf8)?.trimmingCharacters(in: .whitespacesAndNewlines)
            
            // Remove 'v' prefix if present
            return output?.hasPrefix("v") == true ? String(output!.dropFirst()) : output ?? "unknown"
        } catch {
            return "unknown"
        }
    }
}